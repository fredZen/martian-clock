shadow$provide.module$node_modules$d3_polygon$dist$d3_polygon=function(global$jscomp$0,require,module,exports$jscomp$0){(function(global,factory){"object"===typeof exports$jscomp$0&&"undefined"!==typeof module?factory(exports$jscomp$0):"function"===typeof define&&define.amd?define(["exports"],factory):factory(global.d3=global.d3||{})})(this,function(exports){function cross(a,b,c){return(b[0]-a[0])*(c[1]-a[1])-(b[1]-a[1])*(c[0]-a[0])}function lexicographicOrder(a,b){return a[0]-b[0]||a[1]-b[1]}function computeUpperHullIndexes(points){for(var n=
points.length,indexes=[0,1],size=2,i=2;i<n;++i){for(;1<size&&0>=cross(points[indexes[size-2]],points[indexes[size-1]],points[i]);)--size;indexes[size++]=i}return indexes.slice(0,size)}exports.polygonArea=function(polygon){for(var i=-1,n=polygon.length,a,b=polygon[n-1],area=0;++i<n;)a=b,b=polygon[i],area+=a[1]*b[0]-a[0]*b[1];return area/2};exports.polygonCentroid=function(polygon){for(var i=-1,n=polygon.length,x=0,y=0,a,b=polygon[n-1],c,k=0;++i<n;)a=b,b=polygon[i],k+=c=a[0]*b[1]-b[0]*a[1],x+=(a[0]+
b[0])*c,y+=(a[1]+b[1])*c;return k*=3,[x/k,y/k]};exports.polygonHull=function(points){if(3>(n=points.length))return null;var i,n,sortedPoints=Array(n),flippedPoints=Array(n);for(i=0;i<n;++i)sortedPoints[i]=[+points[i][0],+points[i][1],i];sortedPoints.sort(lexicographicOrder);for(i=0;i<n;++i)flippedPoints[i]=[sortedPoints[i][0],-sortedPoints[i][1]];n=computeUpperHullIndexes(sortedPoints);flippedPoints=computeUpperHullIndexes(flippedPoints);var skipLeft=flippedPoints[0]===n[0],skipRight=flippedPoints[flippedPoints.length-
1]===n[n.length-1],hull=[];for(i=n.length-1;0<=i;--i)hull.push(points[sortedPoints[n[i]][2]]);for(i=+skipLeft;i<flippedPoints.length-skipRight;++i)hull.push(points[sortedPoints[flippedPoints[i]][2]]);return hull};exports.polygonContains=function(polygon,point){var n=polygon.length,p=polygon[n-1],x=point[0];point=point[1];for(var x0=p[0],y0=p[1],x1,inside=!1,i=0;i<n;++i)p=polygon[i],x1=p[0],p=p[1],p>point!==y0>point&&x<(x0-x1)*(point-p)/(y0-p)+x1&&(inside=!inside),x0=x1,y0=p;return inside};exports.polygonLength=
function(polygon){var i=-1,n=polygon.length,b=polygon[n-1],xb=b[0];b=b[1];for(var perimeter=0;++i<n;){var xa=xb;var ya=b;b=polygon[i];xb=b[0];b=b[1];xa-=xb;ya-=b;perimeter+=Math.sqrt(xa*xa+ya*ya)}return perimeter};Object.defineProperty(exports,"__esModule",{value:!0})})}
//# sourceMappingURL=module$node_modules$d3_polygon$dist$d3_polygon.js.map
