{"version":3,"sources":["app/main.cljs"],"mappings":"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","names":["var_args","G__38542","app.main/->time","js/Error","hours","app.main.__GT_time.cljs$core$IFn$_invoke$arity$2","minutes","app.main.__GT_time.cljs$core$IFn$_invoke$arity$3","seconds","app.main/pause-schedule","app.main.__GT_time.cljs$core$IFn$_invoke$arity$1","app.main/terran-size","app.main/martian-size","app.main/width","app.main/height","app.main/terran-center","app.main/martian-center","app.main/update-interval","app.main/seconds-per-day","app.main/seconds-of-day","date","offset","cljs.core/mod","app.main/round3","x","G__38543","Math/round","app.main/->hms","time","app.main/time-correction-factor","pause-schedule","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/+","cljs.core.map.cljs$core$IFn$_invoke$arity$2","app.main/martian-remap","map__38544","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","terran","martian","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__38545","p__38546","map__38547","map__38548","start","pause","overlap","cljs.core/reduced","or__4131__auto__","p__38552","map__38553","app.main/time->hands","map__38555","app.main/hands-at","app.main/clock","js/module$node_modules$d3$dist$d3_node","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","app.main/by-name","seq38557","G__38558","cljs.core/first","cljs.core/next","self__4717__auto__","d","_","G__38560","app.main/lines","app.main.lines.cljs$core$IFn$_invoke$arity$2","app.main/fpart","Math/trunc","app.main/position-hand","l","js/module$node_modules$d3_transform$build$d3_transform.transform","p__38561","map__38562","map__38563","y","p__38566","map__38567","map__38568","wrap","current","reverse","h","vec__38571","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","G__38575","app.main/update-clock!","app.main.update_clock_BANG_.cljs$core$IFn$_invoke$arity$1","js/Date","now","js/module$node_modules$d3$dist$d3_node.easeLinear","app.main/create-hand","lines","p__38576","map__38577","map__38578","length","p__38581","map__38582","map__38583","width","app.main/draw-dials","clock","app.main/init-clock!","clojure.string.join.cljs$core$IFn$_invoke$arity$2","app.main.lines.cljs$core$IFn$_invoke$arity$1","js/app","js/app.main","js/app.main.interval","app.main/interval","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","app.main/disbale-zooming","e","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","app.main/main!","js/document.addEventListener","cljs.core/reset!","js/setInterval","app.main/unload!","js/document.removeEventListener","app.main/reload!","cljs.core/deref","js/clearInterval"],"sourcesContent":[";;; Copyright 2019 Frederic Merizen\n;;;\n;;; SPDX-License-Identifier: MIT\n\n(ns app.main\n  (:require\n   [clojure.string :as string]\n   [\"d3\" :as d3]\n   [\"d3-transform\" :as d3-transform]))\n\n(defn ->time\n  ([hours] (->time hours 0))\n  ([hours minutes] (->time hours minutes 0))\n  ([hours minutes seconds]\n   (-> hours (* 60) (+ minutes) (* 60) (+ seconds))))\n\n(def pause-schedule\n  [{:start (->time 24) :pause (->time 0 39 35)}])\n\n(def terran-size 200)\n(def martian-size 50)\n(def width (* terran-size 2))\n(def height (* (+ terran-size martian-size) 2))\n(def terran-center {:x terran-size :y (+ terran-size (* martian-size 2))})\n(def martian-center {:x terran-size :y martian-size})\n(def update-interval 1000)\n\n(def seconds-per-day (* 24 60 60))\n\n(defn seconds-of-day\n  [date offset]\n  (-> date\n      .getTime\n      (+ offset)\n      (/ 1000)\n      (- (-> date .getTimezoneOffset (* 60)))\n      (mod seconds-per-day)))\n\n(defn round3 [x]\n  (-> x (* 1000) (Math/round) (/ 1000)))\n\n(defn ->hms [time]\n  {:hours (-> time (/ 60 60) (mod 12) round3)\n   :minutes (-> time (/ 60) (mod 60) round3)\n   :seconds (-> time (mod 60) round3)})\n\n(defn time-correction-factor [pause-schedule]\n  (/ (apply + seconds-per-day (map :pause pause-schedule))\n     seconds-per-day))\n\n(defn martian-remap [time pause-schedule]\n  (let [time (* time (time-correction-factor pause-schedule))\n        {:keys [terran martian]} (reduce (fn [{:keys [terran]}\n                                              {:keys [start pause]}]\n                                           (let [overlap (- terran start)]\n                                             (cond\n                                               (< overlap 0) (reduced {:terran terran})\n                                               (> overlap pause) {:terran (- terran pause)}\n                                               :else (reduced {:terran start\n                                                               :martian {:current overlap\n                                                                         :wrap pause\n                                                                         :reverse true}}))))\n                                         {:terran time}\n                                         pause-schedule)]\n    {:terran terran\n     :martian (or martian {:current 0 :wrap 1 :reverse true})}))\n\n(defn time->hands\n  [{:keys [terran martian]}]\n  (let [{:keys [hours minutes seconds]} (->hms terran)]\n    (array\n     {:name \"hours\"\n      :center terran-center\n      :style {:length (/ terran-size 2) :width 5}\n      :value {:wrap 12 :current hours}}\n\n     {:name \"minutes\"\n      :center terran-center\n      :style {:length (/ terran-size 1.5) :width 2}\n      :value {:wrap 60 :current minutes}}\n\n     {:name \"seconds\"\n      :center terran-center\n      :style {:length terran-size :width 1}\n      :value {:wrap 60 :current seconds}}\n\n     {:name \"martian\"\n      :center martian-center\n      :style {:length martian-size :width 1}\n      :value martian})))\n\n(defn hands-at\n  [date offset]\n  (-> date (seconds-of-day offset) (martian-remap pause-schedule) time->hands))\n\n(defn clock []\n  (-> d3 (.select \"#clock\")))\n\n(defn by-name [d & _] (:name d))\n\n(defn lines\n  ([date]\n   (lines date 0))\n  ([date offset]\n   (-> (clock)\n       (.selectAll  \"line\")\n       (.data (hands-at date offset) by-name))))\n\n(defn fpart [x]\n  (- x (Math/trunc x)))\n\n(defn position-hand [l]\n  (.attr l\n         \"transform\"\n         (-> (d3-transform/transform)\n             (.translate (fn [{{:keys [x y]} :center} & _] (array x y)))\n             (.rotate (fn [{{:keys [wrap current reverse]} :value :as h}]\n                        (let [[current offset] (if reverse\n                                                 [(- current) 0.5]\n                                                 [current 0])]\n                          (-> current (/ wrap) (+ offset) fpart (* 360))))))))\n\n(defn update-clock!\n  ([]\n   (update-clock! (js/Date.)))\n  ([now]\n   (-> (lines now update-interval)\n       .transition\n       (.duration update-interval)\n       (.ease d3/easeLinear)\n       position-hand)))\n\n(defn create-hand [lines]\n  (-> lines\n      (.append \"line\")\n      (.attr \"x1\" 0)\n      (.attr \"y1\" 0)\n      (.attr \"x2\" 0)\n      (.attr \"y2\" (fn [{{:keys [length]} :style} & _] (- length)))\n      position-hand\n      (.style \"stroke-width\" (fn [{{:keys [width]} :style} & _] width))\n      (.style \"stroke\" \"rgb(255,0,0)\")))\n\n\n(defn draw-dials [clock]\n  (-> clock\n      (.selectAll \"circle\")\n      (.data (array {:center terran-center :radius terran-size}\n                    {:center martian-center :radius martian-size}))\n      .enter\n      (.append \"circle\")\n      (.attr \"cx\" (fn [d & _] (-> d :center :x)))\n      (.attr \"cy\" (fn [d & _] (-> d :center :y)))\n      (.attr \"r\" (fn [d & _] (-> d :radius)))))\n\n(defn init-clock! []\n  (-> (clock) (.attr \"viewBox\" (string/join \" \" [0 0 width height])) draw-dials)\n  (let [now (js/Date.)]\n    (-> (lines now)\n        .enter\n        create-hand)\n    (update-clock! now)))\n\n(defonce interval (atom nil))\n\n(defn disbale-zooming [e]\n  (when-not (= 1 (.-scale e))\n    (.preventDefault e)))\n\n(defn main! []\n  (js/document.addEventListener \"touchmove\" disbale-zooming false)\n  (init-clock!)\n  (reset! interval (js/setInterval update-clock! update-interval)))\n\n(defn unload! []\n  (js/document.removeEventListener \"touchmove\" disbale-zooming false))\n\n(defn reload! []\n  (js/clearInterval @interval)\n  (main!))\n"]}