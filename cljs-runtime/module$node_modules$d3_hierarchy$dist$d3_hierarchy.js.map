{
"version":3,
"file":"module$node_modules$d3_hierarchy$dist$d3_hierarchy.js",
"lineCount":41,
"mappings":"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",
"sources":["node_modules/d3-hierarchy/dist/d3-hierarchy.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$d3_hierarchy$dist$d3_hierarchy\"] = function(global,require,module,exports) {\n// https://d3js.org/d3-hierarchy/ v1.1.8 Copyright 2018 Mike Bostock\n(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\ntypeof define === 'function' && define.amd ? define(['exports'], factory) :\n(factory((global.d3 = global.d3 || {})));\n}(this, (function (exports) { 'use strict';\n\nfunction defaultSeparation(a, b) {\n  return a.parent === b.parent ? 1 : 2;\n}\n\nfunction meanX(children) {\n  return children.reduce(meanXReduce, 0) / children.length;\n}\n\nfunction meanXReduce(x, c) {\n  return x + c.x;\n}\n\nfunction maxY(children) {\n  return 1 + children.reduce(maxYReduce, 0);\n}\n\nfunction maxYReduce(y, c) {\n  return Math.max(y, c.y);\n}\n\nfunction leafLeft(node) {\n  var children;\n  while (children = node.children) node = children[0];\n  return node;\n}\n\nfunction leafRight(node) {\n  var children;\n  while (children = node.children) node = children[children.length - 1];\n  return node;\n}\n\nfunction cluster() {\n  var separation = defaultSeparation,\n      dx = 1,\n      dy = 1,\n      nodeSize = false;\n\n  function cluster(root) {\n    var previousNode,\n        x = 0;\n\n    // First walk, computing the initial x & y values.\n    root.eachAfter(function(node) {\n      var children = node.children;\n      if (children) {\n        node.x = meanX(children);\n        node.y = maxY(children);\n      } else {\n        node.x = previousNode ? x += separation(node, previousNode) : 0;\n        node.y = 0;\n        previousNode = node;\n      }\n    });\n\n    var left = leafLeft(root),\n        right = leafRight(root),\n        x0 = left.x - separation(left, right) / 2,\n        x1 = right.x + separation(right, left) / 2;\n\n    // Second walk, normalizing x & y to the desired size.\n    return root.eachAfter(nodeSize ? function(node) {\n      node.x = (node.x - root.x) * dx;\n      node.y = (root.y - node.y) * dy;\n    } : function(node) {\n      node.x = (node.x - x0) / (x1 - x0) * dx;\n      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;\n    });\n  }\n\n  cluster.separation = function(x) {\n    return arguments.length ? (separation = x, cluster) : separation;\n  };\n\n  cluster.size = function(x) {\n    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);\n  };\n\n  cluster.nodeSize = function(x) {\n    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);\n  };\n\n  return cluster;\n}\n\nfunction count(node) {\n  var sum = 0,\n      children = node.children,\n      i = children && children.length;\n  if (!i) sum = 1;\n  else while (--i >= 0) sum += children[i].value;\n  node.value = sum;\n}\n\nfunction node_count() {\n  return this.eachAfter(count);\n}\n\nfunction node_each(callback) {\n  var node = this, current, next = [node], children, i, n;\n  do {\n    current = next.reverse(), next = [];\n    while (node = current.pop()) {\n      callback(node), children = node.children;\n      if (children) for (i = 0, n = children.length; i < n; ++i) {\n        next.push(children[i]);\n      }\n    }\n  } while (next.length);\n  return this;\n}\n\nfunction node_eachBefore(callback) {\n  var node = this, nodes = [node], children, i;\n  while (node = nodes.pop()) {\n    callback(node), children = node.children;\n    if (children) for (i = children.length - 1; i >= 0; --i) {\n      nodes.push(children[i]);\n    }\n  }\n  return this;\n}\n\nfunction node_eachAfter(callback) {\n  var node = this, nodes = [node], next = [], children, i, n;\n  while (node = nodes.pop()) {\n    next.push(node), children = node.children;\n    if (children) for (i = 0, n = children.length; i < n; ++i) {\n      nodes.push(children[i]);\n    }\n  }\n  while (node = next.pop()) {\n    callback(node);\n  }\n  return this;\n}\n\nfunction node_sum(value) {\n  return this.eachAfter(function(node) {\n    var sum = +value(node.data) || 0,\n        children = node.children,\n        i = children && children.length;\n    while (--i >= 0) sum += children[i].value;\n    node.value = sum;\n  });\n}\n\nfunction node_sort(compare) {\n  return this.eachBefore(function(node) {\n    if (node.children) {\n      node.children.sort(compare);\n    }\n  });\n}\n\nfunction node_path(end) {\n  var start = this,\n      ancestor = leastCommonAncestor(start, end),\n      nodes = [start];\n  while (start !== ancestor) {\n    start = start.parent;\n    nodes.push(start);\n  }\n  var k = nodes.length;\n  while (end !== ancestor) {\n    nodes.splice(k, 0, end);\n    end = end.parent;\n  }\n  return nodes;\n}\n\nfunction leastCommonAncestor(a, b) {\n  if (a === b) return a;\n  var aNodes = a.ancestors(),\n      bNodes = b.ancestors(),\n      c = null;\n  a = aNodes.pop();\n  b = bNodes.pop();\n  while (a === b) {\n    c = a;\n    a = aNodes.pop();\n    b = bNodes.pop();\n  }\n  return c;\n}\n\nfunction node_ancestors() {\n  var node = this, nodes = [node];\n  while (node = node.parent) {\n    nodes.push(node);\n  }\n  return nodes;\n}\n\nfunction node_descendants() {\n  var nodes = [];\n  this.each(function(node) {\n    nodes.push(node);\n  });\n  return nodes;\n}\n\nfunction node_leaves() {\n  var leaves = [];\n  this.eachBefore(function(node) {\n    if (!node.children) {\n      leaves.push(node);\n    }\n  });\n  return leaves;\n}\n\nfunction node_links() {\n  var root = this, links = [];\n  root.each(function(node) {\n    if (node !== root) { // Don\u2019t include the root\u2019s parent, if any.\n      links.push({source: node.parent, target: node});\n    }\n  });\n  return links;\n}\n\nfunction hierarchy(data, children) {\n  var root = new Node(data),\n      valued = +data.value && (root.value = data.value),\n      node,\n      nodes = [root],\n      child,\n      childs,\n      i,\n      n;\n\n  if (children == null) children = defaultChildren;\n\n  while (node = nodes.pop()) {\n    if (valued) node.value = +node.data.value;\n    if ((childs = children(node.data)) && (n = childs.length)) {\n      node.children = new Array(n);\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = node.children[i] = new Node(childs[i]));\n        child.parent = node;\n        child.depth = node.depth + 1;\n      }\n    }\n  }\n\n  return root.eachBefore(computeHeight);\n}\n\nfunction node_copy() {\n  return hierarchy(this).eachBefore(copyData);\n}\n\nfunction defaultChildren(d) {\n  return d.children;\n}\n\nfunction copyData(node) {\n  node.data = node.data.data;\n}\n\nfunction computeHeight(node) {\n  var height = 0;\n  do node.height = height;\n  while ((node = node.parent) && (node.height < ++height));\n}\n\nfunction Node(data) {\n  this.data = data;\n  this.depth =\n  this.height = 0;\n  this.parent = null;\n}\n\nNode.prototype = hierarchy.prototype = {\n  constructor: Node,\n  count: node_count,\n  each: node_each,\n  eachAfter: node_eachAfter,\n  eachBefore: node_eachBefore,\n  sum: node_sum,\n  sort: node_sort,\n  path: node_path,\n  ancestors: node_ancestors,\n  descendants: node_descendants,\n  leaves: node_leaves,\n  links: node_links,\n  copy: node_copy\n};\n\nvar slice = Array.prototype.slice;\n\nfunction shuffle(array) {\n  var m = array.length,\n      t,\n      i;\n\n  while (m) {\n    i = Math.random() * m-- | 0;\n    t = array[m];\n    array[m] = array[i];\n    array[i] = t;\n  }\n\n  return array;\n}\n\nfunction enclose(circles) {\n  var i = 0, n = (circles = shuffle(slice.call(circles))).length, B = [], p, e;\n\n  while (i < n) {\n    p = circles[i];\n    if (e && enclosesWeak(e, p)) ++i;\n    else e = encloseBasis(B = extendBasis(B, p)), i = 0;\n  }\n\n  return e;\n}\n\nfunction extendBasis(B, p) {\n  var i, j;\n\n  if (enclosesWeakAll(p, B)) return [p];\n\n  // If we get here then B must have at least one element.\n  for (i = 0; i < B.length; ++i) {\n    if (enclosesNot(p, B[i])\n        && enclosesWeakAll(encloseBasis2(B[i], p), B)) {\n      return [B[i], p];\n    }\n  }\n\n  // If we get here then B must have at least two elements.\n  for (i = 0; i < B.length - 1; ++i) {\n    for (j = i + 1; j < B.length; ++j) {\n      if (enclosesNot(encloseBasis2(B[i], B[j]), p)\n          && enclosesNot(encloseBasis2(B[i], p), B[j])\n          && enclosesNot(encloseBasis2(B[j], p), B[i])\n          && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {\n        return [B[i], B[j], p];\n      }\n    }\n  }\n\n  // If we get here then something is very wrong.\n  throw new Error;\n}\n\nfunction enclosesNot(a, b) {\n  var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;\n  return dr < 0 || dr * dr < dx * dx + dy * dy;\n}\n\nfunction enclosesWeak(a, b) {\n  var dr = a.r - b.r + 1e-6, dx = b.x - a.x, dy = b.y - a.y;\n  return dr > 0 && dr * dr > dx * dx + dy * dy;\n}\n\nfunction enclosesWeakAll(a, B) {\n  for (var i = 0; i < B.length; ++i) {\n    if (!enclosesWeak(a, B[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction encloseBasis(B) {\n  switch (B.length) {\n    case 1: return encloseBasis1(B[0]);\n    case 2: return encloseBasis2(B[0], B[1]);\n    case 3: return encloseBasis3(B[0], B[1], B[2]);\n  }\n}\n\nfunction encloseBasis1(a) {\n  return {\n    x: a.x,\n    y: a.y,\n    r: a.r\n  };\n}\n\nfunction encloseBasis2(a, b) {\n  var x1 = a.x, y1 = a.y, r1 = a.r,\n      x2 = b.x, y2 = b.y, r2 = b.r,\n      x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,\n      l = Math.sqrt(x21 * x21 + y21 * y21);\n  return {\n    x: (x1 + x2 + x21 / l * r21) / 2,\n    y: (y1 + y2 + y21 / l * r21) / 2,\n    r: (l + r1 + r2) / 2\n  };\n}\n\nfunction encloseBasis3(a, b, c) {\n  var x1 = a.x, y1 = a.y, r1 = a.r,\n      x2 = b.x, y2 = b.y, r2 = b.r,\n      x3 = c.x, y3 = c.y, r3 = c.r,\n      a2 = x1 - x2,\n      a3 = x1 - x3,\n      b2 = y1 - y2,\n      b3 = y1 - y3,\n      c2 = r2 - r1,\n      c3 = r3 - r1,\n      d1 = x1 * x1 + y1 * y1 - r1 * r1,\n      d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,\n      d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,\n      ab = a3 * b2 - a2 * b3,\n      xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,\n      xb = (b3 * c2 - b2 * c3) / ab,\n      ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,\n      yb = (a2 * c3 - a3 * c2) / ab,\n      A = xb * xb + yb * yb - 1,\n      B = 2 * (r1 + xa * xb + ya * yb),\n      C = xa * xa + ya * ya - r1 * r1,\n      r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);\n  return {\n    x: x1 + xa + xb * r,\n    y: y1 + ya + yb * r,\n    r: r\n  };\n}\n\nfunction place(b, a, c) {\n  var dx = b.x - a.x, x, a2,\n      dy = b.y - a.y, y, b2,\n      d2 = dx * dx + dy * dy;\n  if (d2) {\n    a2 = a.r + c.r, a2 *= a2;\n    b2 = b.r + c.r, b2 *= b2;\n    if (a2 > b2) {\n      x = (d2 + b2 - a2) / (2 * d2);\n      y = Math.sqrt(Math.max(0, b2 / d2 - x * x));\n      c.x = b.x - x * dx - y * dy;\n      c.y = b.y - x * dy + y * dx;\n    } else {\n      x = (d2 + a2 - b2) / (2 * d2);\n      y = Math.sqrt(Math.max(0, a2 / d2 - x * x));\n      c.x = a.x + x * dx - y * dy;\n      c.y = a.y + x * dy + y * dx;\n    }\n  } else {\n    c.x = a.x + c.r;\n    c.y = a.y;\n  }\n}\n\nfunction intersects(a, b) {\n  var dr = a.r + b.r - 1e-6, dx = b.x - a.x, dy = b.y - a.y;\n  return dr > 0 && dr * dr > dx * dx + dy * dy;\n}\n\nfunction score(node) {\n  var a = node._,\n      b = node.next._,\n      ab = a.r + b.r,\n      dx = (a.x * b.r + b.x * a.r) / ab,\n      dy = (a.y * b.r + b.y * a.r) / ab;\n  return dx * dx + dy * dy;\n}\n\nfunction Node$1(circle) {\n  this._ = circle;\n  this.next = null;\n  this.previous = null;\n}\n\nfunction packEnclose(circles) {\n  if (!(n = circles.length)) return 0;\n\n  var a, b, c, n, aa, ca, i, j, k, sj, sk;\n\n  // Place the first circle.\n  a = circles[0], a.x = 0, a.y = 0;\n  if (!(n > 1)) return a.r;\n\n  // Place the second circle.\n  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;\n  if (!(n > 2)) return a.r + b.r;\n\n  // Place the third circle.\n  place(b, a, c = circles[2]);\n\n  // Initialize the front-chain using the first three circles a, b and c.\n  a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);\n  a.next = c.previous = b;\n  b.next = a.previous = c;\n  c.next = b.previous = a;\n\n  // Attempt to place each remaining circle\u2026\n  pack: for (i = 3; i < n; ++i) {\n    place(a._, b._, c = circles[i]), c = new Node$1(c);\n\n    // Find the closest intersecting circle on the front-chain, if any.\n    // \u201cCloseness\u201d is determined by linear distance along the front-chain.\n    // \u201cAhead\u201d or \u201cbehind\u201d is likewise determined by linear distance.\n    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;\n    do {\n      if (sj <= sk) {\n        if (intersects(j._, c._)) {\n          b = j, a.next = b, b.previous = a, --i;\n          continue pack;\n        }\n        sj += j._.r, j = j.next;\n      } else {\n        if (intersects(k._, c._)) {\n          a = k, a.next = b, b.previous = a, --i;\n          continue pack;\n        }\n        sk += k._.r, k = k.previous;\n      }\n    } while (j !== k.next);\n\n    // Success! Insert the new circle c between a and b.\n    c.previous = a, c.next = b, a.next = b.previous = b = c;\n\n    // Compute the new closest circle pair to the centroid.\n    aa = score(a);\n    while ((c = c.next) !== b) {\n      if ((ca = score(c)) < aa) {\n        a = c, aa = ca;\n      }\n    }\n    b = a.next;\n  }\n\n  // Compute the enclosing circle of the front chain.\n  a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);\n\n  // Translate the circles to put the enclosing circle around the origin.\n  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;\n\n  return c.r;\n}\n\nfunction siblings(circles) {\n  packEnclose(circles);\n  return circles;\n}\n\nfunction optional(f) {\n  return f == null ? null : required(f);\n}\n\nfunction required(f) {\n  if (typeof f !== \"function\") throw new Error;\n  return f;\n}\n\nfunction constantZero() {\n  return 0;\n}\n\nfunction constant(x) {\n  return function() {\n    return x;\n  };\n}\n\nfunction defaultRadius(d) {\n  return Math.sqrt(d.value);\n}\n\nfunction index() {\n  var radius = null,\n      dx = 1,\n      dy = 1,\n      padding = constantZero;\n\n  function pack(root) {\n    root.x = dx / 2, root.y = dy / 2;\n    if (radius) {\n      root.eachBefore(radiusLeaf(radius))\n          .eachAfter(packChildren(padding, 0.5))\n          .eachBefore(translateChild(1));\n    } else {\n      root.eachBefore(radiusLeaf(defaultRadius))\n          .eachAfter(packChildren(constantZero, 1))\n          .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))\n          .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));\n    }\n    return root;\n  }\n\n  pack.radius = function(x) {\n    return arguments.length ? (radius = optional(x), pack) : radius;\n  };\n\n  pack.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];\n  };\n\n  pack.padding = function(x) {\n    return arguments.length ? (padding = typeof x === \"function\" ? x : constant(+x), pack) : padding;\n  };\n\n  return pack;\n}\n\nfunction radiusLeaf(radius) {\n  return function(node) {\n    if (!node.children) {\n      node.r = Math.max(0, +radius(node) || 0);\n    }\n  };\n}\n\nfunction packChildren(padding, k) {\n  return function(node) {\n    if (children = node.children) {\n      var children,\n          i,\n          n = children.length,\n          r = padding(node) * k || 0,\n          e;\n\n      if (r) for (i = 0; i < n; ++i) children[i].r += r;\n      e = packEnclose(children);\n      if (r) for (i = 0; i < n; ++i) children[i].r -= r;\n      node.r = e + r;\n    }\n  };\n}\n\nfunction translateChild(k) {\n  return function(node) {\n    var parent = node.parent;\n    node.r *= k;\n    if (parent) {\n      node.x = parent.x + k * node.x;\n      node.y = parent.y + k * node.y;\n    }\n  };\n}\n\nfunction roundNode(node) {\n  node.x0 = Math.round(node.x0);\n  node.y0 = Math.round(node.y0);\n  node.x1 = Math.round(node.x1);\n  node.y1 = Math.round(node.y1);\n}\n\nfunction treemapDice(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (x1 - x0) / parent.value;\n\n  while (++i < n) {\n    node = nodes[i], node.y0 = y0, node.y1 = y1;\n    node.x0 = x0, node.x1 = x0 += node.value * k;\n  }\n}\n\nfunction partition() {\n  var dx = 1,\n      dy = 1,\n      padding = 0,\n      round = false;\n\n  function partition(root) {\n    var n = root.height + 1;\n    root.x0 =\n    root.y0 = padding;\n    root.x1 = dx;\n    root.y1 = dy / n;\n    root.eachBefore(positionNode(dy, n));\n    if (round) root.eachBefore(roundNode);\n    return root;\n  }\n\n  function positionNode(dy, n) {\n    return function(node) {\n      if (node.children) {\n        treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);\n      }\n      var x0 = node.x0,\n          y0 = node.y0,\n          x1 = node.x1 - padding,\n          y1 = node.y1 - padding;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      node.x0 = x0;\n      node.y0 = y0;\n      node.x1 = x1;\n      node.y1 = y1;\n    };\n  }\n\n  partition.round = function(x) {\n    return arguments.length ? (round = !!x, partition) : round;\n  };\n\n  partition.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];\n  };\n\n  partition.padding = function(x) {\n    return arguments.length ? (padding = +x, partition) : padding;\n  };\n\n  return partition;\n}\n\nvar keyPrefix = \"$\", // Protect against keys like \u201c__proto__\u201d.\n    preroot = {depth: -1},\n    ambiguous = {};\n\nfunction defaultId(d) {\n  return d.id;\n}\n\nfunction defaultParentId(d) {\n  return d.parentId;\n}\n\nfunction stratify() {\n  var id = defaultId,\n      parentId = defaultParentId;\n\n  function stratify(data) {\n    var d,\n        i,\n        n = data.length,\n        root,\n        parent,\n        node,\n        nodes = new Array(n),\n        nodeId,\n        nodeKey,\n        nodeByKey = {};\n\n    for (i = 0; i < n; ++i) {\n      d = data[i], node = nodes[i] = new Node(d);\n      if ((nodeId = id(d, i, data)) != null && (nodeId += \"\")) {\n        nodeKey = keyPrefix + (node.id = nodeId);\n        nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;\n      }\n    }\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i], nodeId = parentId(data[i], i, data);\n      if (nodeId == null || !(nodeId += \"\")) {\n        if (root) throw new Error(\"multiple roots\");\n        root = node;\n      } else {\n        parent = nodeByKey[keyPrefix + nodeId];\n        if (!parent) throw new Error(\"missing: \" + nodeId);\n        if (parent === ambiguous) throw new Error(\"ambiguous: \" + nodeId);\n        if (parent.children) parent.children.push(node);\n        else parent.children = [node];\n        node.parent = parent;\n      }\n    }\n\n    if (!root) throw new Error(\"no root\");\n    root.parent = preroot;\n    root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);\n    root.parent = null;\n    if (n > 0) throw new Error(\"cycle\");\n\n    return root;\n  }\n\n  stratify.id = function(x) {\n    return arguments.length ? (id = required(x), stratify) : id;\n  };\n\n  stratify.parentId = function(x) {\n    return arguments.length ? (parentId = required(x), stratify) : parentId;\n  };\n\n  return stratify;\n}\n\nfunction defaultSeparation$1(a, b) {\n  return a.parent === b.parent ? 1 : 2;\n}\n\n// function radialSeparation(a, b) {\n//   return (a.parent === b.parent ? 1 : 2) / a.depth;\n// }\n\n// This function is used to traverse the left contour of a subtree (or\n// subforest). It returns the successor of v on this contour. This successor is\n// either given by the leftmost child of v or by the thread of v. The function\n// returns null if and only if v is on the highest level of its subtree.\nfunction nextLeft(v) {\n  var children = v.children;\n  return children ? children[0] : v.t;\n}\n\n// This function works analogously to nextLeft.\nfunction nextRight(v) {\n  var children = v.children;\n  return children ? children[children.length - 1] : v.t;\n}\n\n// Shifts the current subtree rooted at w+. This is done by increasing\n// prelim(w+) and mod(w+) by shift.\nfunction moveSubtree(wm, wp, shift) {\n  var change = shift / (wp.i - wm.i);\n  wp.c -= change;\n  wp.s += shift;\n  wm.c += change;\n  wp.z += shift;\n  wp.m += shift;\n}\n\n// All other shifts, applied to the smaller subtrees between w- and w+, are\n// performed by this function. To prepare the shifts, we have to adjust\n// change(w+), shift(w+), and change(w-).\nfunction executeShifts(v) {\n  var shift = 0,\n      change = 0,\n      children = v.children,\n      i = children.length,\n      w;\n  while (--i >= 0) {\n    w = children[i];\n    w.z += shift;\n    w.m += shift;\n    shift += w.s + (change += w.c);\n  }\n}\n\n// If vi-\u2019s ancestor is a sibling of v, returns vi-\u2019s ancestor. Otherwise,\n// returns the specified (default) ancestor.\nfunction nextAncestor(vim, v, ancestor) {\n  return vim.a.parent === v.parent ? vim.a : ancestor;\n}\n\nfunction TreeNode(node, i) {\n  this._ = node;\n  this.parent = null;\n  this.children = null;\n  this.A = null; // default ancestor\n  this.a = this; // ancestor\n  this.z = 0; // prelim\n  this.m = 0; // mod\n  this.c = 0; // change\n  this.s = 0; // shift\n  this.t = null; // thread\n  this.i = i; // number\n}\n\nTreeNode.prototype = Object.create(Node.prototype);\n\nfunction treeRoot(root) {\n  var tree = new TreeNode(root, 0),\n      node,\n      nodes = [tree],\n      child,\n      children,\n      i,\n      n;\n\n  while (node = nodes.pop()) {\n    if (children = node._.children) {\n      node.children = new Array(n = children.length);\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = node.children[i] = new TreeNode(children[i], i));\n        child.parent = node;\n      }\n    }\n  }\n\n  (tree.parent = new TreeNode(null, 0)).children = [tree];\n  return tree;\n}\n\n// Node-link tree diagram using the Reingold-Tilford \"tidy\" algorithm\nfunction tree() {\n  var separation = defaultSeparation$1,\n      dx = 1,\n      dy = 1,\n      nodeSize = null;\n\n  function tree(root) {\n    var t = treeRoot(root);\n\n    // Compute the layout using Buchheim et al.\u2019s algorithm.\n    t.eachAfter(firstWalk), t.parent.m = -t.z;\n    t.eachBefore(secondWalk);\n\n    // If a fixed node size is specified, scale x and y.\n    if (nodeSize) root.eachBefore(sizeNode);\n\n    // If a fixed tree size is specified, scale x and y based on the extent.\n    // Compute the left-most, right-most, and depth-most nodes for extents.\n    else {\n      var left = root,\n          right = root,\n          bottom = root;\n      root.eachBefore(function(node) {\n        if (node.x < left.x) left = node;\n        if (node.x > right.x) right = node;\n        if (node.depth > bottom.depth) bottom = node;\n      });\n      var s = left === right ? 1 : separation(left, right) / 2,\n          tx = s - left.x,\n          kx = dx / (right.x + s + tx),\n          ky = dy / (bottom.depth || 1);\n      root.eachBefore(function(node) {\n        node.x = (node.x + tx) * kx;\n        node.y = node.depth * ky;\n      });\n    }\n\n    return root;\n  }\n\n  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is\n  // applied recursively to the children of v, as well as the function\n  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the\n  // node v is placed to the midpoint of its outermost children.\n  function firstWalk(v) {\n    var children = v.children,\n        siblings = v.parent.children,\n        w = v.i ? siblings[v.i - 1] : null;\n    if (children) {\n      executeShifts(v);\n      var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n      if (w) {\n        v.z = w.z + separation(v._, w._);\n        v.m = v.z - midpoint;\n      } else {\n        v.z = midpoint;\n      }\n    } else if (w) {\n      v.z = w.z + separation(v._, w._);\n    }\n    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n  }\n\n  // Computes all real x-coordinates by summing up the modifiers recursively.\n  function secondWalk(v) {\n    v._.x = v.z + v.parent.m;\n    v.m += v.parent.m;\n  }\n\n  // The core of the algorithm. Here, a new subtree is combined with the\n  // previous subtrees. Threads are used to traverse the inside and outside\n  // contours of the left and right subtree up to the highest common level. The\n  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the\n  // superscript o means outside and i means inside, the subscript - means left\n  // subtree and + means right subtree. For summing up the modifiers along the\n  // contour, we use respective variables si+, si-, so-, and so+. Whenever two\n  // nodes of the inside contours conflict, we compute the left one of the\n  // greatest uncommon ancestors using the function ANCESTOR and call MOVE\n  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.\n  // Finally, we add a new thread (if necessary).\n  function apportion(v, w, ancestor) {\n    if (w) {\n      var vip = v,\n          vop = v,\n          vim = w,\n          vom = vip.parent.children[0],\n          sip = vip.m,\n          sop = vop.m,\n          sim = vim.m,\n          som = vom.m,\n          shift;\n      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {\n        vom = nextLeft(vom);\n        vop = nextRight(vop);\n        vop.a = v;\n        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n        if (shift > 0) {\n          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);\n          sip += shift;\n          sop += shift;\n        }\n        sim += vim.m;\n        sip += vip.m;\n        som += vom.m;\n        sop += vop.m;\n      }\n      if (vim && !nextRight(vop)) {\n        vop.t = vim;\n        vop.m += sim - sop;\n      }\n      if (vip && !nextLeft(vom)) {\n        vom.t = vip;\n        vom.m += sip - som;\n        ancestor = v;\n      }\n    }\n    return ancestor;\n  }\n\n  function sizeNode(node) {\n    node.x *= dx;\n    node.y = node.depth * dy;\n  }\n\n  tree.separation = function(x) {\n    return arguments.length ? (separation = x, tree) : separation;\n  };\n\n  tree.size = function(x) {\n    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);\n  };\n\n  tree.nodeSize = function(x) {\n    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);\n  };\n\n  return tree;\n}\n\nfunction treemapSlice(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (y1 - y0) / parent.value;\n\n  while (++i < n) {\n    node = nodes[i], node.x0 = x0, node.x1 = x1;\n    node.y0 = y0, node.y1 = y0 += node.value * k;\n  }\n}\n\nvar phi = (1 + Math.sqrt(5)) / 2;\n\nfunction squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n  var rows = [],\n      nodes = parent.children,\n      row,\n      nodeValue,\n      i0 = 0,\n      i1 = 0,\n      n = nodes.length,\n      dx, dy,\n      value = parent.value,\n      sumValue,\n      minValue,\n      maxValue,\n      newRatio,\n      minRatio,\n      alpha,\n      beta;\n\n  while (i0 < n) {\n    dx = x1 - x0, dy = y1 - y0;\n\n    // Find the next non-empty node.\n    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);\n    minValue = maxValue = sumValue;\n    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n    beta = sumValue * sumValue * alpha;\n    minRatio = Math.max(maxValue / beta, beta / minValue);\n\n    // Keep adding nodes while the aspect ratio maintains or improves.\n    for (; i1 < n; ++i1) {\n      sumValue += nodeValue = nodes[i1].value;\n      if (nodeValue < minValue) minValue = nodeValue;\n      if (nodeValue > maxValue) maxValue = nodeValue;\n      beta = sumValue * sumValue * alpha;\n      newRatio = Math.max(maxValue / beta, beta / minValue);\n      if (newRatio > minRatio) { sumValue -= nodeValue; break; }\n      minRatio = newRatio;\n    }\n\n    // Position and record the row orientation.\n    rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});\n    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);\n    else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\n    value -= sumValue, i0 = i1;\n  }\n\n  return rows;\n}\n\nvar squarify = (function custom(ratio) {\n\n  function squarify(parent, x0, y0, x1, y1) {\n    squarifyRatio(ratio, parent, x0, y0, x1, y1);\n  }\n\n  squarify.ratio = function(x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n\n  return squarify;\n})(phi);\n\nfunction index$1() {\n  var tile = squarify,\n      round = false,\n      dx = 1,\n      dy = 1,\n      paddingStack = [0],\n      paddingInner = constantZero,\n      paddingTop = constantZero,\n      paddingRight = constantZero,\n      paddingBottom = constantZero,\n      paddingLeft = constantZero;\n\n  function treemap(root) {\n    root.x0 =\n    root.y0 = 0;\n    root.x1 = dx;\n    root.y1 = dy;\n    root.eachBefore(positionNode);\n    paddingStack = [0];\n    if (round) root.eachBefore(roundNode);\n    return root;\n  }\n\n  function positionNode(node) {\n    var p = paddingStack[node.depth],\n        x0 = node.x0 + p,\n        y0 = node.y0 + p,\n        x1 = node.x1 - p,\n        y1 = node.y1 - p;\n    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n    node.x0 = x0;\n    node.y0 = y0;\n    node.x1 = x1;\n    node.y1 = y1;\n    if (node.children) {\n      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\n      x0 += paddingLeft(node) - p;\n      y0 += paddingTop(node) - p;\n      x1 -= paddingRight(node) - p;\n      y1 -= paddingBottom(node) - p;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      tile(node, x0, y0, x1, y1);\n    }\n  }\n\n  treemap.round = function(x) {\n    return arguments.length ? (round = !!x, treemap) : round;\n  };\n\n  treemap.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\n  };\n\n  treemap.tile = function(x) {\n    return arguments.length ? (tile = required(x), treemap) : tile;\n  };\n\n  treemap.padding = function(x) {\n    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\n  };\n\n  treemap.paddingInner = function(x) {\n    return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant(+x), treemap) : paddingInner;\n  };\n\n  treemap.paddingOuter = function(x) {\n    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\n  };\n\n  treemap.paddingTop = function(x) {\n    return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant(+x), treemap) : paddingTop;\n  };\n\n  treemap.paddingRight = function(x) {\n    return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant(+x), treemap) : paddingRight;\n  };\n\n  treemap.paddingBottom = function(x) {\n    return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant(+x), treemap) : paddingBottom;\n  };\n\n  treemap.paddingLeft = function(x) {\n    return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant(+x), treemap) : paddingLeft;\n  };\n\n  return treemap;\n}\n\nfunction binary(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      i, n = nodes.length,\n      sum, sums = new Array(n + 1);\n\n  for (sums[0] = sum = i = 0; i < n; ++i) {\n    sums[i + 1] = sum += nodes[i].value;\n  }\n\n  partition(0, n, parent.value, x0, y0, x1, y1);\n\n  function partition(i, j, value, x0, y0, x1, y1) {\n    if (i >= j - 1) {\n      var node = nodes[i];\n      node.x0 = x0, node.y0 = y0;\n      node.x1 = x1, node.y1 = y1;\n      return;\n    }\n\n    var valueOffset = sums[i],\n        valueTarget = (value / 2) + valueOffset,\n        k = i + 1,\n        hi = j - 1;\n\n    while (k < hi) {\n      var mid = k + hi >>> 1;\n      if (sums[mid] < valueTarget) k = mid + 1;\n      else hi = mid;\n    }\n\n    if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;\n\n    var valueLeft = sums[k] - valueOffset,\n        valueRight = value - valueLeft;\n\n    if ((x1 - x0) > (y1 - y0)) {\n      var xk = (x0 * valueRight + x1 * valueLeft) / value;\n      partition(i, k, valueLeft, x0, y0, xk, y1);\n      partition(k, j, valueRight, xk, y0, x1, y1);\n    } else {\n      var yk = (y0 * valueRight + y1 * valueLeft) / value;\n      partition(i, k, valueLeft, x0, y0, x1, yk);\n      partition(k, j, valueRight, x0, yk, x1, y1);\n    }\n  }\n}\n\nfunction sliceDice(parent, x0, y0, x1, y1) {\n  (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);\n}\n\nvar resquarify = (function custom(ratio) {\n\n  function resquarify(parent, x0, y0, x1, y1) {\n    if ((rows = parent._squarify) && (rows.ratio === ratio)) {\n      var rows,\n          row,\n          nodes,\n          i,\n          j = -1,\n          n,\n          m = rows.length,\n          value = parent.value;\n\n      while (++j < m) {\n        row = rows[j], nodes = row.children;\n        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;\n        if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);\n        else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);\n        value -= row.value;\n      }\n    } else {\n      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);\n      rows.ratio = ratio;\n    }\n  }\n\n  resquarify.ratio = function(x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n\n  return resquarify;\n})(phi);\n\nexports.cluster = cluster;\nexports.hierarchy = hierarchy;\nexports.pack = index;\nexports.packSiblings = siblings;\nexports.packEnclose = enclose;\nexports.partition = partition;\nexports.stratify = stratify;\nexports.tree = tree;\nexports.treemap = index$1;\nexports.treemapBinary = binary;\nexports.treemapDice = treemapDice;\nexports.treemapSlice = treemapSlice;\nexports.treemapSliceDice = sliceDice;\nexports.treemapSquarify = squarify;\nexports.treemapResquarify = resquarify;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};"],
"names":["shadow$provide","global","require","module","exports","factory","define","amd","d3","defaultSeparation","a","b","parent","meanXReduce","x","c","maxYReduce","y","Math","max","leafLeft","node","children","leafRight","length","count","sum","i","value","hierarchy","data","root","Node","valued","nodes","child","childs","n","defaultChildren","pop","Array","push","depth","eachBefore","computeHeight","d","copyData","height","enclose","circles","slice","call","m","array","t","random","B","e","p","enclosesWeak","enclosesWeakAll","enclosesNot","encloseBasis2","j","encloseBasis3","Error","r","dr","dx","dy","x1","y1","r1","x2","y2","r2","x21","y21","r21","l","sqrt","x3","y3","r3","a2","a3","b2","b3","c2","c3","d1","d2","ab","xa","xb","ya","yb","A","C","place","intersects","score","_","next","Node$1","circle","previous","packEnclose","k","sj","sk","aa","ca","required","f","constantZero","constant","defaultRadius","radiusLeaf","radius","packChildren","padding","translateChild","roundNode","x0","round","y0","treemapDice","defaultId","id","defaultParentId","parentId","defaultSeparation$1","nextLeft","v","nextRight","TreeNode","s","z","treeRoot","tree","treemapSlice","squarifyRatio","ratio","rows","row","nodeValue","i1","i0","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","dice","prototype","constructor","node_count","eachAfter","each","node_each","callback","current","reverse","node_eachAfter","node_eachBefore","node_sum","sort","node_sort","compare","path","node_path","end","start","aNodes","ancestors","bNodes","ancestor","splice","node_ancestors","descendants","node_descendants","leaves","node_leaves","links","node_links","source","target","copy","node_copy","preroot","ambiguous","Object","create","phi","squarify","custom","squarify.ratio","resquarify","_squarify","resquarify.ratio","cluster","previousNode","reduce","separation","left","right","nodeSize","cluster.separation","arguments","size","cluster.size","cluster.nodeSize","pack","index","min","pack.radius","pack.size","pack.padding","packSiblings","siblings","partition","positionNode","partition.round","partition.size","partition.padding","stratify","nodeId","nodeByKey","nodeKey","keyPrefix","stratify.id","stratify.parentId","firstWalk","secondWalk","sizeNode","bottom","tx","kx","ky","w","shift","change","midpoint","vop","vip","vom","sip","sop","sim","vim","som","wp","wm","tree.separation","tree.size","tree.nodeSize","treemap","index$1","paddingStack","paddingInner","paddingLeft","paddingTop","paddingRight","paddingBottom","tile","treemap.round","treemap.size","treemap.tile","treemap.padding","paddingOuter","treemap.paddingInner","treemap.paddingOuter","treemap.paddingTop","treemap.paddingRight","treemap.paddingBottom","treemap.paddingLeft","treemapBinary","binary","valueOffset","sums","valueTarget","hi","mid","valueLeft","valueRight","xk","yk","treemapSliceDice","sliceDice","treemapSquarify","treemapResquarify","defineProperty"]
}
